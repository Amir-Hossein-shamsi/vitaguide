from typing import Any, Dict, List
from dotenv import load_dotenv
load_dotenv()
import os
from langchain_ollama import OllamaEmbeddings
from langchain_pinecone import PineconeVectorStore
from langchain.chains.retrieval import create_retrieval_chain
from langchain.chains import create_history_aware_retriever
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain_openai import ChatOpenAI
from langchain import hub

# Ensure environment variables are set
INDEX_NAME = os.environ.get("INDEX_NAME")
if not INDEX_NAME:
    raise ValueError("INDEX_NAME is not set in the environment variables.")
API_KEY = os.environ.get("CHATGPT_KEY")
if not API_KEY:
    raise ValueError("API_KEY is not set in the environment variables.")
BASE_URL = os.environ.get("BASE_URL")
if not BASE_URL:
    raise ValueError("BASE_URL is not set in the environment variables.")
#  -------------------------------

def run_llm(query: str, chat_history: List[Dict[str, Any]] = None):
    if chat_history is None:
        chat_history = []
    """
    Runs a retrieval-based question-answering system using LangChain, Pinecone, and OpenAI's GPT model.

    Args:
        query (str): The question to ask the system.

    Returns:
        str: The answer generated by the language model.
    """
    embedding= OllamaEmbeddings(model="nomic-embed-text:v1.5")

    vector_store = PineconeVectorStore(
        index_name=INDEX_NAME,
        embedding=embedding
    )
    chat=ChatOpenAI(base_url=BASE_URL,api_key=API_KEY,model="openai/gpt-4o-mini",verbose=True ,temperature=0.0)
    
    retrieval_qa_chat_prompt= hub.pull("langchain-ai/retrieval-qa-chat")
    rephrase_prompt=hub.pull("langchain-ai/chat-langchain-rephrase")
    
    history_aware_retriever=create_history_aware_retriever(
        llm=chat,
        retriever=vector_store.as_retriever(),
        prompt=rephrase_prompt,
    )
    

    stuff_documents_chain=create_stuff_documents_chain(
        chat,
        retrieval_qa_chat_prompt)
    
    qa=create_retrieval_chain(
        retriever=history_aware_retriever,
        combine_docs_chain=stuff_documents_chain)
    
    response = qa.invoke({"input": query,"chat_history":chat_history})
    result={
        "query": response['input'],
        "results": response['answer'],
        "source_documents": response['context'],
    }
    return result


if __name__ == '__main__':
    query = "What do i do to lose weight and belly fat?"

    response = run_llm(query)
    print("Response:\n", response['results'])
